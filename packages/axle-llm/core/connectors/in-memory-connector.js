// Этот файл содержит реализацию коннектора типа `in-memory`.
// Он хранит все данные в обычном JavaScript-объекте в оперативной памяти.
// Данные теряются при перезапуске приложения.

class InMemoryConnector {
  /**
   * @param {string} name - Имя коннектора, как оно указано в манифесте.
   * @param {object} config - Объект конфигурации для этого коннектора из манифеста.
   */
  constructor(name, config) {
    this.name = name;
    this.config = config;
    
    // Глубокое клонирование начального состояния.
    // Это критически важно, чтобы избежать случайных мутаций объекта initialState,
    // если он используется где-то еще. `JSON.parse(JSON.stringify(obj))` -
    // это простой и надежный способ сделать глубокую копию.
    this.data = JSON.parse(JSON.stringify(config.initialState || {}));
  }

  /**
   * Считывает текущее состояние данных из памяти.
   * Метод объявлен как `async`, чтобы поддерживать единый интерфейс
   * со всеми другими типами коннекторов (которые могут работать с файлами или сетью).
   * @returns {Promise<object>} - Промис, который разрешается с глубокой копией данных.
   */
  async read() {
    // Мы возвращаем глубокую копию, а не ссылку на `this.data`.
    // Это мера безопасности, чтобы внешний код, получивший данные,
    // не мог случайно изменить внутреннее состояние коннектора.
    return JSON.parse(JSON.stringify(this.data));
  }

  /**
   * Полностью перезаписывает состояние данных в памяти.
   * @param {object} newData - Новый объект данных для сохранения.
   * @returns {Promise<void>}
   */
  async write(newData) {
    // Мы также сохраняем глубокую копию новых данных,
    // чтобы разорвать любые возможные ссылки на внешний объект.
    this.data = JSON.parse(JSON.stringify(newData));
    
    // Возвращаем разрешенный промис для соответствия интерфейсу.
    return Promise.resolve();
  }
}

module.exports = {
  InMemoryConnector,
};