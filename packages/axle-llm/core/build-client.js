// packages/axle-llm/core/build-client.js
const esbuild = require('esbuild');
const path = require('path');
const fs = require('fs');

// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appPath = process.cwd();
const outDir = path.join(appPath, 'public');

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const entryPoint = path.resolve(__dirname, '..', 'client', 'engine-client.js');

async function runClientBuild() {
    const isWatchMode = process.argv.includes('--watch');
    console.log(`[axle-client-build] Starting client bundle build... ${isWatchMode ? '(watch mode)' : ''}`);

    try {
        await fs.promises.mkdir(outDir, { recursive: true });

        // –§–ª–∞–≥, —á—Ç–æ–±—ã —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        let isFirstBuild = true;

        const buildReporterPlugin = {
            name: 'axle-client-build-reporter',
            setup(build) {
                // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–±–æ—Ä–∫–∏ (–∏–ª–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –≤ watch-—Ä–µ–∂–∏–º–µ)
                build.onEnd(result => {
                    const outputPath = path.join(outDir, 'bundle.js');
                    if (result.errors.length > 0) {
                        // esbuild —Å–∞–º –≤—ã–≤–µ–¥–µ—Ç –æ—à–∏–±–∫–∏ –≤ stderr, –µ—Å–ª–∏ logLevel –Ω–µ 'silent'
                        console.error('[axle-client-build] üö® Client bundle build failed.');
                        return;
                    }

                    if (fs.existsSync(outputPath)) {
                        // --- –í—Å—Ç–∞–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö React –∏ ReactDOM ---
                        let content = fs.readFileSync(outputPath, 'utf8');
                        const prefix = `
var React = require('react');
var ReactDOM = require('react-dom/client');
window.React = React;
window.ReactDOM = ReactDOM;
`;
                        content += '\nwindow.axle = { components: {} };\n';
                        fs.writeFileSync(outputPath, prefix + content);
                        // --- –ö–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ---

                        if (isFirstBuild) {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–µ
                            console.log('// CLIENT-BUILD-COMPLETE //');
                            isFirstBuild = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                        } else {
                            // –õ–æ–≥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ—Å–±–æ—Ä–æ–∫ –≤ watch-—Ä–µ–∂–∏–º–µ
                            console.log(`[axle-client-build] ‚ú® Client bundle rebuild complete.`);
                        }
                    }
                });
            },
        };

        const buildOptions = {
            entryPoints: [entryPoint],
            outfile: path.join(outDir, 'bundle.js'),
            bundle: true,
            platform: 'browser',
            format: 'iife',
            sourcemap: true,
            define: { 'process.env.NODE_ENV': `"${isWatchMode ? 'development' : 'production'}"` },
            inject: [path.resolve(__dirname, 'react-shim.js')],
            plugins: [buildReporterPlugin],
            // –ü–æ–¥–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ esbuild, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à –ø–ª–∞–≥–∏–Ω —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥–æ–º
            logLevel: 'silent', 
        };
        
        if (isWatchMode) {
            const ctx = await esbuild.context(buildOptions);
            await ctx.watch();
            console.log('[axle-client-build] Watching for client file changes...');
        } else {
            await esbuild.build(buildOptions);
        }

    } catch (error) {
        console.error('[axle-client-build] üö® Client bundle build process failed to start:', error);
        process.exit(1);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shim-—Ñ–∞–π–ª–∞
async function createShimFile() {
    const shimPath = path.resolve(__dirname, 'react-shim.js');
    const content = `import React from 'react';\nimport ReactDOM from 'react-dom/client';\nexport { React, ReactDOM };`;
    try {
        await fs.promises.access(shimPath);
    } catch {
        await fs.promises.writeFile(shimPath, content, 'utf-8');
    }
}

async function main() {
    await createShimFile();
    await runClientBuild();
}

main();