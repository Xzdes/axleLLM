// packages/axle-llm/core/build-client.js
const esbuild = require('esbuild');
const path = require('path');
const fs = require('fs');

const appPath = process.cwd();
const outDir = path.join(appPath, 'public');
const clientComponentsDir = path.join(appPath, '.axle-build-client');
const entryPoint = path.resolve(__dirname, '..', 'client', 'index.js');

async function runClientBuild() {
    const isWatchMode = process.argv.includes('--watch');
    console.log(`[axle-client-build] Starting final client bundle assembly... ${isWatchMode ? '(watch mode)' : ''}`);

    try {
        await fs.promises.mkdir(outDir, { recursive: true });

        // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–Ω–¥–ª–∞ –¥–≤–∏–∂–∫–∞
        const buildOptions = {
            entryPoints: [entryPoint],
            bundle: true,
            platform: 'browser',
            format: 'iife',
            sourcemap: true,
            define: { 'process.env.NODE_ENV': `"${isWatchMode ? 'development' : 'production'}"` },
            write: false, // –ú—ã –Ω–µ –ø–∏—à–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É, –∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤ –ø–∞–º—è—Ç–∏
        };

        // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –∏ —Å–∫–ª–µ–∏–≤–∞–µ—Ç –≤—Å–µ –≤–º–µ—Å—Ç–µ
        const assembleBundle = async () => {
            console.log('[axle-client-build] Assembling final bundle...');
            const result = await esbuild.build(buildOptions);
            
            if (result.errors.length > 0) {
                console.error('[axle-client-build] üö® Core engine build failed.');
                return;
            }

            let finalContent = result.outputFiles[0].text;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–π–º—Å–ø–µ–π—Å
            finalContent += '\nwindow.axle = window.axle || { components: {} };\n';

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if (fs.existsSync(clientComponentsDir)) {
                const componentFiles = fs.readdirSync(clientComponentsDir).filter(f => f.endsWith('.js'));
                for (const file of componentFiles) {
                    const componentName = path.basename(file, '.js');
                    const componentContent = fs.readFileSync(path.join(clientComponentsDir, file), 'utf-8');
                    const script = `
// --- Component: ${componentName} ---
(function() {
  const exports = {};
  const module = { exports };
  ${componentContent.replace('var axleComponent =', 'module.exports =')}
  if (module.exports) {
    window.axle.components['${componentName}'] = module.exports.default || module.exports;
  }
})();
`;
                    finalContent += script;
                }
                console.log(`[axle-client-build] Injected ${componentFiles.length} component definitions.`);
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
            fs.writeFileSync(path.join(outDir, 'bundle.js'), finalContent);
            console.log('[axle-client-build] ‚úÖ Final bundle written to disk.');
        };

        // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–±–æ—Ä–∫–∞
        await assembleBundle();
        console.log('// CLIENT-BUILD-COMPLETE //'); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É

        if (isWatchMode) {
            // –í —Ä–µ–∂–∏–º–µ watch, –Ω–∞–º –Ω—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∏ –∑–∞ —Ñ–∞–π–ª–∞–º–∏ –¥–≤–∏–∂–∫–∞, –∏ –∑–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
            const engineFilesWatcher = esbuild.context({ ...buildOptions, write: true, outfile: path.join(outDir, 'bundle.js') });
            await engineFilesWatcher.watch();
            console.log('[axle-client-build] Watching for engine file changes...');
            
            // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –±–∞–Ω–¥–ª, –∫–æ–≥–¥–∞ –º–µ–Ω—è—é—Ç—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            fs.watch(clientComponentsDir, async (eventType, filename) => {
                if (filename && filename.endsWith('.js')) {
                    console.log(`[axle-client-build] Detected change in components: ${filename}. Re-assembling bundle...`);
                    await assembleBundle();
                    console.log(`[axle-client-build] ‚ú® Bundle re-assembled.`);
                }
            });
        }

    } catch (error) {
        console.error('[axle-client-build] üö® Client build process failed to start:', error);
        process.exit(1);
    }
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function createClientEntryPoint() {
    const entryPointPath = entryPoint;
    const engineClientPath = './engine-client.js';
    const content = `
// –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –ó–¥–µ—Å—å –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º React, —á—Ç–æ–±—ã esbuild –µ–≥–æ —Å–±–∞–Ω–¥–ª–∏–ª.
import React from 'react';
import ReactDOM from 'react-dom/client';

window.React = React;
window.ReactDOM = ReactDOM;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º –¥–≤–∏–∂–æ–∫
import '${engineClientPath}';
`;
    const clientDir = path.dirname(entryPointPath);
    if (!fs.existsSync(clientDir)) { fs.mkdirSync(clientDir, { recursive: true }); }
    if (!fs.existsSync(entryPointPath)) {
        fs.writeFileSync(entryPointPath, content.trim(), 'utf-8');
    }
}


async function main() {
    await createClientEntryPoint();
    await runClientBuild();
}

main();