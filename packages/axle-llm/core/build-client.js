// packages/axle-llm/core/build-client.js
const esbuild = require('esbuild');
const path = require('path');
const fs = require('fs');

const appPath = process.cwd();
const outDir = path.join(appPath, 'public');
// ‚òÖ‚òÖ‚òÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é, –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ ‚òÖ‚òÖ‚òÖ
const entryPoint = path.resolve(__dirname, '..', 'client', 'index.js'); 

async function runClientBuild() {
    const isWatchMode = process.argv.includes('--watch');
    console.log(`[axle-client-build] Starting client bundle build... ${isWatchMode ? '(watch mode)' : ''}`);

    try {
        await fs.promises.mkdir(outDir, { recursive: true });

        // –§–ª–∞–≥, —á—Ç–æ–±—ã —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ä–µ–∂–∏–º–µ --watch
        let isFirstBuild = true;

        const buildOptions = {
            entryPoints: [entryPoint],
            outfile: path.join(outDir, 'bundle.js'),
            bundle: true,
            platform: 'browser',
            format: 'iife', // –°–∞–º–æ–≤—ã–∑—ã–≤–∞—é—â–∞—è—Å—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—è–∑–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π scope
            sourcemap: true,
            define: { 'process.env.NODE_ENV': `"${isWatchMode ? 'development' : 'production'}"` },
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ "—Ö–∞–∫–∏": inject, banner, footer.
            // –í—Å—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞ (entryPoint).
        };

        const onBuildEnd = (result) => {
            if (result.errors.length > 0) {
                console.error('[axle-client-build] üö® Client bundle build failed. See errors above.');
                // esbuild —Å–∞–º –≤—ã–≤–µ–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ stderr
                return;
            }
            
            if (isFirstBuild) {
                console.log('[axle-client-build] ‚úÖ Initial client bundle complete.');
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É commands.js
                console.log('// CLIENT-BUILD-COMPLETE //');
                isFirstBuild = false;
            } else {
                console.log(`[axle-client-build] ‚ú® Client bundle rebuild complete.`);
            }
        };

        if (isWatchMode) {
            const ctx = await esbuild.context({
                ...buildOptions,
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –ü–û–°–õ–ï –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
                plugins: [{
                    name: 'watch-reporter',
                    setup(build) {
                        build.onEnd(onBuildEnd);
                    },
                }],
            });
            await ctx.watch();
            console.log('[axle-client-build] Watching for client file changes...');
        } else {
            const result = await esbuild.build(buildOptions);
            onBuildEnd(result);
        }

    } catch (error) {
        console.error('[axle-client-build] üö® Client bundle build process failed to start:', error);
        process.exit(1);
    }
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–¥–∏–º –µ–µ.
async function createClientEntryPoint() {
    const entryPointPath = entryPoint;
    const engineClientPath = './engine-client.js'; // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è import
    const content = `
// This is the new main entry point for the client bundle.
// It ensures React is bundled and exposed globally before the engine runs.
import React from 'react';
import ReactDOM from 'react-dom/client';

// Make React and ReactDOM globally available for the engine and components.
window.React = React;
window.ReactDOM = ReactDOM;
window.axle = { components: {} }; // Initialize the component namespace.

// Now that globals are set, run the actual engine logic.
import '${engineClientPath}';
`;
    const clientDir = path.dirname(entryPointPath);
    if (!fs.existsSync(clientDir)) {
        fs.mkdirSync(clientDir, { recursive: true });
    }
    if (!fs.existsSync(entryPointPath)) {
        fs.writeFileSync(entryPointPath, content.trim(), 'utf-8');
        console.log(`[axle-client-build] Created client entry point at ${entryPointPath}`);
    }
}

async function main() {
    await createClientEntryPoint();
    await runClientBuild();
}

main();